#!/bin/cish -lverbose
#debug


test="test"
String test2="test1"


Console::print(IO::findFiles(".", "*-dependencies.jar"))
Console::print(IO::findFiles(".", "*/compiler-v?.?.?-*-dependencies.jar"))
Console::print(IO::findFiles(".", &"(.*)-dependencies.jar"))

regexVariable = &"(.*)-dependencies.jar"
if(regexVariable.matches("dependencies.jar")){
 Console::print("Matches dependencies.jar")
}

if(regexVariable.matches("lang-v0.3.5-STABLE-5e542e8e79b77a52b40ebf99bae6c8e35e131b76-jar-with-dependencies.jar")){
 Console::print("Matches lang-v0.3.5-STABLE-5e542e8e79b77a52b40ebf99bae6c8e35e131b76-jar-with-dependencies.jar")
}

#if(&"(.*)-dependencies.jar".matches("jar-with-dependencies.jar")){
# Console::print("Matches jar-with-dependencies.jar")
#}


IO::findFiles(".", regexVariable).exec((file) -> {
  Console::print(regexVariable.replaceAll(file,"$1"))
});

regexVariableForExtracting = &"(.*)/(.*)jar-with-dependencies.jar"
IO::findFiles(".", regexVariable).exec((file) -> {
  Console::print(regexVariableForExtracting.extract(file.toString(),2))
});


#IO::listFiles("interpreter/target/").exec((file) -> {
#  if(file.~Jar()) {
#        if (file.getName().contains("-jar-with-dependencies")) {
#            INTERPRETER="target/cish"
#            IO::setContent(INTERPRETER, "#!/usr/bin/java -jar \\n")
#            IO::addContent(INTERPRETER, file.getContent())
#            IO::executable(INTERPRETER,true)
#            IO::copy(INTERPRETER,"docker/build/cish")
##BUG: a char on this line is needed
#            INTERPRETER="target/cish-alpine"
#            IO::setContent(INTERPRETER, "#!/opt/openjdk-15/bin/java -jar \\n")
#            IO::addContent(INTERPRETER, file.getContent())
#            IO::executable(INTERPRETER,true)
#            IO::copy(INTERPRETER,"docker/build/cish-alpine")
#        }
#    }
#});

#jarFile = IO::findFiles("interpreter/target/", "(.*).jar")
#Console::print(jarFile);

#Console::print("Hi");
#Demo::greetings


function TYPE a(){

}
function a(): TYPE {

}
a(): TYPE {

}
TYPE a() {

}
TYPE.a() {

}
a() => TYPE {

}

TYPE a = (String a, String b) { return a+b }
TYPE a = (String a, String b): a+b